#!/bin/bash

echo "========================================="
echo "KI·ªÇM TRA TO√ÄN B·ªò H·ªÜ TH·ªêNG GPPM"
echo "========================================="
echo ""

# Test 1: Services
echo "‚úì Test 1: Docker services..."
SERVICES=$(docker compose ps --services 2>/dev/null | wc -l)
RUNNING=$(docker compose ps --status running 2>/dev/null | wc -l)
echo "  Running: $RUNNING/$SERVICES services"
docker compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null | grep -v "^NAME"
echo ""

# Test 2: DermatologyAnalyzer
echo "‚úì Test 2: DermatologyAnalyzer (PyTorch + OpenCLIP)..."
ANALYZER_STATUS=$(curl -s http://localhost:8001/health | jq -r '.dermatology_analyzer' 2>/dev/null)
if [ "$ANALYZER_STATUS" = "active" ]; then
    echo "  ‚úÖ ACTIVE - Model s·ª≠ d·ª•ng PyTorch & DermLIP"
    
    # Check model cache
    MODEL_SIZE=$(docker exec $(docker ps -qf "name=ai-service") du -sh /root/.cache/huggingface 2>/dev/null | awk '{print $1}')
    echo "  üì¶ Model cached: $MODEL_SIZE"
else
    echo "  ‚ùå INACTIVE - ƒêang d√πng stub scores"
fi
echo ""

# Test 3: Real prediction
echo "‚úì Test 3: Prediction th·ª±c v·ªõi ·∫£nh test..."
echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==" | base64 -d > /tmp/test_derma_full.png

RESULT=$(curl -s -X POST http://localhost:8000/api/v1/analyze -F "image=@/tmp/test_derma_full.png" 2>/dev/null)

if [ -n "$RESULT" ]; then
    PRIMARY=$(echo "$RESULT" | jq -r '.primary_disease.vietnamese_name // .primary_disease.name // "N/A"' 2>/dev/null)
    CONFIDENCE=$(echo "$RESULT" | jq -r '.primary_disease.confidence // 0' 2>/dev/null)
    SEVERITY=$(echo "$RESULT" | jq -r '.primary_disease.severity // "N/A"' 2>/dev/null)
    
    if [ "$PRIMARY" != "N/A" ] && [ "$PRIMARY" != "null" ]; then
        CONF_PERCENT=$(echo "$CONFIDENCE * 100" | bc 2>/dev/null | cut -d. -f1)
        echo "  ‚úÖ Real prediction:"
        echo "     Disease: $PRIMARY"
        echo "     Confidence: ${CONF_PERCENT}%"
        echo "     Severity: $SEVERITY"
    else
        echo "  ‚ö†Ô∏è Ch·ªâ c√≥ cv_scores (stub mode)"
    fi
else
    echo "  ‚ùå API error"
fi
rm -f /tmp/test_derma_full.png
echo ""

# Test 4: Frontend
echo "‚úì Test 4: Frontend UI..."
TITLE=$(curl -s http://localhost:5173 | grep -o '<title>[^<]*</title>' | sed 's/<[^>]*>//g')
CSS_CHECK=$(curl -s http://localhost:5173/src/index.css 2>/dev/null | grep -c "tailwindcss")
CAMERA_BTN=$(docker exec $(docker ps -qf "name=frontend") grep -c "Ch·ª•p ·∫£nh" /app/src/components/DermaSafeAI.tsx 2>/dev/null || echo "0")

echo "  Title: $TITLE"
if [ "$CSS_CHECK" -gt 0 ]; then
    echo "  ‚úÖ CSS: Tailwind loaded"
else
    echo "  ‚ùå CSS: Not loaded"
fi

if [ "$CAMERA_BTN" -gt 0 ]; then
    echo "  ‚úÖ Camera button: Exists ($CAMERA_BTN occurrences)"
else
    echo "  ‚ùå Camera button: Not found"
fi
echo ""

# Test 5: Capture API
echo "‚úì Test 5: Smart Capture API..."
TIPS_COUNT=$(curl -s http://localhost:8000/api/v1/capture/tips | jq '.tips | length' 2>/dev/null || echo "0")
GUIDELINES_COUNT=$(curl -s http://localhost:8001/capture/guidelines | jq '.guidelines | length' 2>/dev/null || echo "0")

if [ "$TIPS_COUNT" -gt 0 ]; then
    echo "  ‚úÖ Tips API: $TIPS_COUNT tips available"
else
    echo "  ‚ùå Tips API: Error"
fi

if [ "$GUIDELINES_COUNT" -gt 0 ]; then
    echo "  ‚úÖ Guidelines API: $GUIDELINES_COUNT guidelines"
else
    echo "  ‚ùå Guidelines API: Error"
fi
echo ""

# Test 6: Disk space
echo "‚úì Test 6: Disk space..."
df -h / | tail -1 | awk '{print "  Free: " $4 " / " $2 " (" $5 " used)"}'
echo ""

# Summary
echo "========================================="
echo "üìä T·ªîNG K·∫æT"
echo "========================================="
echo ""

if [ "$ANALYZER_STATUS" = "active" ]; then
    echo "üéâ H·ªÜ TH·ªêNG HO·∫†T ƒê·ªòNG HO√ÄN TO√ÄN!"
    echo ""
    echo "‚úÖ DermatologyAnalyzer: ACTIVE v·ªõi PyTorch + DermLIP"
    echo "‚úÖ Predictions: S·ª≠ d·ª•ng model th·ª±c (kh√¥ng ph·∫£i stub)"
    echo "‚úÖ Frontend: UI ƒë·∫ßy ƒë·ªß v·ªõi CSS v√† camera"
    echo "‚úÖ API: T·∫•t c·∫£ endpoints ho·∫°t ƒë·ªông"
    echo ""
    echo "üî¨ Model ƒë√£ t·∫£i:"
    echo "   - DermLIP ViT-B/16 t·ª´ HuggingFace"
    echo "   - Size: ~$MODEL_SIZE"
    echo "   - Device: CPU (c√≥ th·ªÉ chuy·ªÉn GPU n·∫øu c√≥)"
    echo ""
else
    echo "‚ö†Ô∏è H·ªÜ TH·ªêNG CH·∫†Y STUB MODE"
    echo ""
    echo "‚ùå DermatologyAnalyzer: INACTIVE"
    echo "‚ö†Ô∏è ƒêang d√πng stub scores (fake predictions)"
    echo "üí° C·∫ßn c√†i PyTorch + OpenCLIP ƒë·ªÉ c√≥ predictions th·ª±c"
fi

echo "========================================="
echo "üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG"
echo "========================================="
echo ""
echo "1. M·ªü browser: http://localhost:5173"
echo "   - Hard reload: Ctrl+Shift+R (Windows/Linux)"
echo "   - Hard reload: Cmd+Shift+R (Mac)"
echo ""
echo "2. Test ch·ª©c nƒÉng:"
echo "   ‚úì Upload ·∫£nh ‚Üí Xem prediction"
echo "   ‚úì Click 'Ch·ª•p ·∫£nh' ‚Üí Test camera modal"
echo "   ‚úì Ch·ªçn tri·ªáu ch·ª©ng ‚Üí Xem risk adjustment"
echo ""
echo "3. Xem logs:"
echo "   docker compose logs ai-service --tail 50"
echo "   docker compose logs frontend --tail 50"
echo ""
echo "4. API Documentation:"
echo "   http://localhost:8000/docs (FastAPI Swagger)"
echo ""
