"""
Logic ƒë·ªÉ validate v√† extract tri·ªáu ch·ª©ng t·ª´ m√¥ t·∫£ t·ª± do c·ªßa ng∆∞·ªùi d√πng
"""
import re
from typing import List, Dict, Tuple


# T·ª´ ƒëi·ªÉn tri·ªáu ch·ª©ng da li·ªÖu v·ªõi c√°c t·ª´ ƒë·ªìng nghƒ©a
SYMPTOM_KEYWORDS = {
    # Tri·ªáu ch·ª©ng ch√≠nh
    "ng·ª©a": ["ng·ª©a", "ng·ª©a ng√°y", "swollen", "itchy", "itching", "ng·ª©a ran"],
    "ƒë·ªè": ["ƒë·ªè", "red", "redness", "s∆∞ng ƒë·ªè", "ƒë·ªè ·ª≠ng", "b·ªã ƒë·ªè"],
    "s∆∞ng": ["s∆∞ng", "swelling", "swollen", "ph·ªìng", "ph√π"],
    "ƒëau": ["ƒëau", "pain", "painful", "nh·ª©c", "bu·ªìn"],
    "n·ªïi m·ª•n": ["m·ª•n", "acne", "pimple", "m·ª•n ƒë·∫ßu ƒëen", "m·ª•n tr·ª©ng c√°", "n·ªïi m·ª•n"],
    "v·∫£y": ["v·∫£y", "flaky", "scaling", "bong v·∫£y", "bong tr√≥c"],
    "kh√¥": ["kh√¥", "dry", "dryness", "kh√¥ r√°p", "da kh√¥"],
    "ch·∫£y n∆∞·ªõc": ["ch·∫£y n∆∞·ªõc", "oozing", "weeping", "ti·∫øt d·ªãch"],
    
    # H√¨nh d√°ng t·ªïn th∆∞∆°ng
    "n·ªët": ["n·ªët", "nodule", "bump", "u nh·ªè"],
    "m·∫£ng": ["m·∫£ng", "patch", "plaque", "v√πng"],
    "m·ª•n n∆∞·ªõc": ["m·ª•n n∆∞·ªõc", "blister", "vesicle", "b√≥ng n∆∞·ªõc"],
    "v·∫øt lo√©t": ["lo√©t", "ulcer", "v·∫øt th∆∞∆°ng", "v·∫øt h·ªü"],
    
    # M√†u s·∫Øc
    "tr·∫Øng": ["tr·∫Øng", "white", "nh·∫°t m√†u"],
    "n√¢u": ["n√¢u", "brown", "s·∫°m", "s·∫´m m√†u"],
    "ƒëen": ["ƒëen", "black", "s·∫´m ƒëen"],
    "v√†ng": ["v√†ng", "yellow"],
    
    # C·∫£m gi√°c
    "r√°t": ["r√°t", "burning", "b·ªèng r√°t", "n√≥ng r√°t"],
    "ch√¢m ch√≠ch": ["ch√¢m ch√≠ch", "tingling", "t√™", "t√™ ch√¢m"],
    "t√™": ["t√™", "numb", "numbness"],
    
    # Lan r·ªông
    "lan r·ªông": ["lan", "spreading", "lan r·ªông", "lan ra"],
    "khu tr√∫": ["khu tr√∫", "localized", "m·ªôt ch·ªó", "c·ªë ƒë·ªãnh"],
    
    # Ti·∫øt d·ªãch
    "m·ªß": ["m·ªß", "pus", "m·ªß v√†ng"],
    "m√°u": ["m√°u", "blood", "bleeding", "ch·∫£y m√°u"],
    
    # Tri·ªáu ch·ª©ng to√†n th√¢n
    "s·ªët": ["s·ªët", "fever", "n√≥ng ng∆∞·ªùi"],
    "m·ªát m·ªèi": ["m·ªát", "tired", "fatigue", "m·ªát m·ªèi", "u·ªÉ o·∫£i"],
}

# C√°c t·ª´ kh√¥ng ph·∫£i tri·ªáu ch·ª©ng (invalid input)
INVALID_KEYWORDS = [
    # T√≠nh c√°ch/c·∫£m x√∫c
    "ƒë·∫πp", "x·∫•u", "trai", "g√°i", "bu·ªìn", "vui", "h·∫°nh ph√∫c", "kh√≥ ch·ªãu",
    # ƒê·ªông v·∫≠t
    "ch√≥", "m√®o", "chu·ªôt", "g√†", "v·ªãt",
    # T√™n b·ªánh (kh√¥ng cho ph√©p t·ª± ch·∫©n ƒëo√°n)
    "ung th∆∞", "cancer", "melanoma", "b·ªánh",
    # C√¢u h·ªèi chung
    "l√† g√¨", "th·∫ø n√†o", "·ªü ƒë√¢u", "khi n√†o",
]


def normalize_text(text: str) -> str:
    """Chu·∫©n h√≥a vƒÉn b·∫£n v·ªÅ d·∫°ng lowercase, lo·∫°i b·ªè d·∫•u c√¢u th·ª´a"""
    text = text.lower().strip()
    # Lo·∫°i b·ªè d·∫•u c√¢u th·ª´a nh∆∞ng gi·ªØ l·∫°i space
    text = re.sub(r'[^\w\s]', ' ', text)
    # Lo·∫°i b·ªè space th·ª´a
    text = re.sub(r'\s+', ' ', text)
    return text


def is_valid_symptom_description(text: str) -> bool:
    """
    Ki·ªÉm tra xem m√¥ t·∫£ c√≥ ph·∫£i l√† tri·ªáu ch·ª©ng h·ª£p l·ªá kh√¥ng
    Returns:
        True n·∫øu l√† tri·ªáu ch·ª©ng h·ª£p l·ªá
        False n·∫øu l√† n·ªôi dung kh√¥ng li√™n quan
    """
    normalized = normalize_text(text)
    
    # Ki·ªÉm tra invalid keywords
    for invalid_word in INVALID_KEYWORDS:
        if invalid_word in normalized:
            return False
    
    # N·∫øu qu√° ng·∫Øn (< 3 t·ª´) v√† kh√¥ng c√≥ keyword tri·ªáu ch·ª©ng -> invalid
    words = normalized.split()
    if len(words) < 3:
        has_symptom = False
        for symptom_group in SYMPTOM_KEYWORDS.values():
            for keyword in symptom_group:
                if keyword in normalized:
                    has_symptom = True
                    break
            if has_symptom:
                break
        if not has_symptom:
            return False
    
    return True


def extract_symptoms(text: str) -> List[str]:
    """
    Tr√≠ch xu·∫•t danh s√°ch tri·ªáu ch·ª©ng t·ª´ m√¥ t·∫£
    Returns:
        Danh s√°ch c√°c tri·ªáu ch·ª©ng ƒë∆∞·ª£c chu·∫©n h√≥a
    """
    normalized = normalize_text(text)
    symptoms_found = []
    
    for symptom_name, keywords in SYMPTOM_KEYWORDS.items():
        for keyword in keywords:
            if keyword in normalized:
                # Th√™m t√™n tri·ªáu ch·ª©ng chu·∫©n (kh√¥ng tr√πng)
                if symptom_name not in symptoms_found:
                    symptoms_found.append(symptom_name)
                break
    
    return symptoms_found


def generate_advice_response(symptoms: List[str], language: str = "vi") -> str:
    """
    T·∫°o c√¢u t∆∞ v·∫•n nh·∫π nh√†ng d·ª±a tr√™n tri·ªáu ch·ª©ng
    """
    if language == "vi":
        if not symptoms:
            return "M√¨nh ch∆∞a r√µ tri·ªáu ch·ª©ng l·∫Øm, b·∫°n m√¥ t·∫£ c·ª• th·ªÉ h∆°n ƒë∆∞·ª£c kh√¥ng? ü§î"
        
        # Ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng
        serious_symptoms = {"ƒëau", "s∆∞ng", "ch·∫£y n∆∞·ªõc", "m·ªß", "v·∫øt lo√©t", "s·ªët", "m√°u"}
        mild_symptoms = {"ng·ª©a", "ƒë·ªè", "kh√¥", "v·∫£y"}
        
        has_serious = any(s in serious_symptoms for s in symptoms)
        has_mild = any(s in mild_symptoms for s in symptoms)
        
        if has_serious:
            return f"B·∫°n c√≥ v·∫ª c√≥ tri·ªáu ch·ª©ng c·∫ßn ch√∫ √Ω ƒë·∫•y ({', '.join(symptoms[:3])}...). H√£y gi·ªØ v√πng da s·∫°ch s·∫Ω v√† theo d√µi th√™m nh√©! ü©∫"
        elif has_mild:
            return f"Tri·ªáu ch·ª©ng c·ªßa b·∫°n c√≥ v·∫ª nh·∫π ({', '.join(symptoms[:2])}). H√£y gi·ªØ da s·∫°ch, tr√°nh g√£i v√† theo d√µi th√™m nh√©! üòä"
        else:
            return f"M√¨nh ƒë√£ ghi nh·∫≠n tri·ªáu ch·ª©ng c·ªßa b·∫°n ({', '.join(symptoms[:2])}). H√£y t·∫£i ·∫£nh l√™n ƒë·ªÉ ƒë∆∞·ª£c ph√¢n t√≠ch ch√≠nh x√°c h∆°n nh√©! üì∏"
    
    else:  # English
        if not symptoms:
            return "I'm not quite sure about your symptoms. Could you describe them more specifically? ü§î"
        
        serious_symptoms = {"ƒëau", "s∆∞ng", "ch·∫£y n∆∞·ªõc", "m·ªß", "v·∫øt lo√©t", "s·ªët", "m√°u"}
        mild_symptoms = {"ng·ª©a", "ƒë·ªè", "kh√¥", "v·∫£y"}
        
        has_serious = any(s in serious_symptoms for s in symptoms)
        has_mild = any(s in mild_symptoms for s in symptoms)
        
        if has_serious:
            return f"You seem to have symptoms that need attention ({', '.join(symptoms[:3])}...). Keep the area clean and monitor it! ü©∫"
        elif has_mild:
            return f"Your symptoms appear mild ({', '.join(symptoms[:2])}). Keep your skin clean, avoid scratching, and monitor! üòä"
        else:
            return f"I've noted your symptoms ({', '.join(symptoms[:2])}). Please upload an image for more accurate analysis! üì∏"


def generate_invalid_response(text: str, language: str = "vi") -> str:
    """
    T·∫°o c√¢u tr·∫£ l·ªùi vui v·∫ª khi ng∆∞·ªùi d√πng nh·∫≠p n·ªôi dung kh√¥ng ph·∫£i tri·ªáu ch·ª©ng
    """
    normalized = normalize_text(text)
    
    if language == "vi":
        # Ph√°t hi·ªán m·ªôt s·ªë tr∆∞·ªùng h·ª£p c·ª• th·ªÉ
        if any(word in normalized for word in ["ƒë·∫πp", "trai", "g√°i"]):
            return "Haha, c√°i n√†y kh√¥ng ph·∫£i tri·ªáu ch·ª©ng ƒë√¢u nha üòÑ, n√≥i r√µ h∆°n v·ªÅ t√¨nh tr·∫°ng da gi√∫p m√¨nh ƒë∆∞·ª£c kh√¥ng?"
        elif any(word in normalized for word in ["ch√≥", "m√®o", "c·∫Øn"]):
            return "·ªêi, b·ªã c√∫n/m√®o c·∫Øn √†? üê± Nh∆∞ng m√¨nh ch·ªâ h·ªó tr·ª£ ch·∫©n ƒëo√°n da li·ªÖu th√¥i nha! N·∫øu v·∫øt c·∫Øn c√≥ v·∫•n ƒë·ªÅ th√¨ m√¥ t·∫£ tri·ªáu ch·ª©ng v·∫øt th∆∞∆°ng ƒëi b·∫°n."
        elif any(word in normalized for word in ["bu·ªìn", "vui", "m·ªát"]):
            return "C·∫£m x√∫c c·ªßa b·∫°n r·∫•t quan tr·ªçng nh∆∞ng m√¨nh ch·ªâ h·ªó tr·ª£ v·ªÅ da li·ªÖu th√¥i üòÖ. N·∫øu da c√≥ v·∫•n ƒë·ªÅ g√¨ th√¨ m√¥ t·∫£ c·ª• th·ªÉ nh√©!"
        else:
            return "Hmm, m√¨nh kh√¥ng hi·ªÉu l·∫Øm ü§î. B·∫°n h√£y m√¥ t·∫£ c√°c tri·ªáu ch·ª©ng tr√™n da nh∆∞: ng·ª©a, ƒë·ªè, s∆∞ng, m·ª•n... gi√∫p m√¨nh nh√©!"
    
    else:  # English
        if any(word in normalized for word in ["handsome", "beautiful", "pretty"]):
            return "Haha, that's not a symptom! üòÑ Can you describe your skin condition more clearly?"
        elif any(word in normalized for word in ["dog", "cat", "bite"]):
            return "Oh, a bite? üê± But I only help with dermatology! If the bite has issues, please describe the wound symptoms."
        elif any(word in normalized for word in ["sad", "happy", "tired"]):
            return "Your feelings matter, but I only help with dermatology üòÖ. If you have skin issues, please describe them!"
        else:
            return "Hmm, I don't quite understand ü§î. Please describe skin symptoms like: itching, redness, swelling, pimples... for me!"


def validate_and_extract_symptoms(description: str, language: str = "vi") -> Dict:
    """
    Main function: Validate v√† extract tri·ªáu ch·ª©ng t·ª´ m√¥ t·∫£
    
    Returns:
        {
            "valid": bool,
            "symptoms": List[str],
            "response": str
        }
    """
    # Ki·ªÉm tra input r·ªóng
    if not description or len(description.strip()) < 2:
        return {
            "valid": False,
            "symptoms": [],
            "response": "B·∫°n ch∆∞a nh·∫≠p g√¨ c·∫£ üòÖ" if language == "vi" else "You haven't entered anything üòÖ"
        }
    
    # Validate
    is_valid = is_valid_symptom_description(description)
    
    if not is_valid:
        return {
            "valid": False,
            "symptoms": [],
            "response": generate_invalid_response(description, language)
        }
    
    # Extract symptoms
    symptoms = extract_symptoms(description)
    
    # Generate response
    response = generate_advice_response(symptoms, language)
    
    return {
        "valid": True,
        "symptoms": symptoms,
        "response": response
    }
